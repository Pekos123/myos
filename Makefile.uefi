# UEFI x86_64 OS Makefile
# Compilers
ASM = nasm
CC = gcc
LD = ld
OBJCOPY = objcopy

# Flags
ASMFLAGS = -f elf64
CFLAGS = -m64 -ffreestanding -fno-pie -nostdlib -nostdinc -mno-red-zone -fno-stack-protector -fno-builtin -O2
LDFLAGS = -m elf_x86_64 -T src/linkerScript.ld -nostdlib -static

# Directories
BOOTLOADER_DIR = bootloader
SRC_DIR = src
BUILD_DIR = build
BIN_DIR = bin
OBJ_DIR = obj
EFI_DIR = efi

# Source files
C_SOURCES = $(wildcard $(SRC_DIR)/*.c) $(wildcard $(SRC_DIR)/**/*.c)
ASM_SOURCES = $(filter-out $(SRC_DIR)/kernel_entry.asm, $(wildcard $(SRC_DIR)/*.asm) $(wildcard $(SRC_DIR)/**/*.asm))

# Object files
KERNEL_ENTRY_O = $(OBJ_DIR)/kernel_entry.o
C_OBJECTS = $(patsubst $(SRC_DIR)/%.c, $(OBJ_DIR)/%.o, $(C_SOURCES))
ASM_OBJECTS = $(patsubst $(SRC_DIR)/%.asm, $(OBJ_DIR)/%.o, $(ASM_SOURCES))

# Binary files
KERNEL_ELF = $(BUILD_DIR)/kernel.elf
KERNEL_BIN = $(BIN_DIR)/kernel.bin
BOOTLOADER_EFI = $(EFI_DIR)/BOOTX64.EFI
USB_IMG = usb.img

.PHONY: all clean dirs uefi

all: dirs $(KERNEL_BIN)

uefi: dirs $(BOOTLOADER_EFI) $(KERNEL_BIN) usb-image

dirs:
	@mkdir -p $(BUILD_DIR) $(BIN_DIR) $(OBJ_DIR) $(OBJ_DIR)/stdlib $(OBJ_DIR)/video $(EFI_DIR)

$(KERNEL_ENTRY_O): $(SRC_DIR)/kernel_entry.asm
	@echo "Assembling kernel entry..."
	$(ASM) $(ASMFLAGS) $< -o $@

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c
	@echo "Compiling $<..."
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.asm
	@echo "Assembling $<..."
	@mkdir -p $(dir $@)
	$(ASM) $(ASMFLAGS) $< -o $@

$(KERNEL_ELF): $(KERNEL_ENTRY_O) $(C_OBJECTS) $(ASM_OBJECTS)
	@echo "Linking kernel..."
	$(LD) $(LDFLAGS) -o $@ $^

$(KERNEL_BIN): $(KERNEL_ELF)
	@echo "Creating kernel binary..."
	$(OBJCOPY) -O binary $< $@

# Simple UEFI bootloader build
$(BOOTLOADER_EFI): bootloader/uefi.asm
	@echo "Building UEFI bootloader..."
	$(ASM) -f bin bootloader/uefi.asm -o $@
	@echo "UEFI bootloader created: $@"

# Create bootable USB image
usb-image: $(BOOTLOADER_EFI) $(KERNEL_BIN)
	@echo "Creating UEFI bootable USB image..."
	@dd if=/dev/zero of=$(USB_IMG) bs=1M count=10 status=none
	@mkfs.fat -F 32 $(USB_IMG) > /dev/null 2>&1
	@mmd -i $(USB_IMG) ::/EFI
	@mmd -i $(USB_IMG) ::/EFI/BOOT
	@mcopy -i $(USB_IMG) $(BOOTLOADER_EFI) ::/EFI/BOOT/BOOTX64.EFI
	@mcopy -i $(USB_IMG) $(KERNEL_BIN) ::/
	@echo "USB image created: $(USB_IMG)"

clean:
	@echo "Cleaning build files..."
	@rm -rf $(BUILD_DIR) $(BIN_DIR) $(OBJ_DIR) $(EFI_DIR) $(USB_IMG)
	@echo "Clean complete!"
